# output png enrichment chart
out=paste(o,pin,"enrichment_chart.svg",sep='/')
svg(
filename = out,
width = 8,
height = 4
)
plot(enrichment_chart(selected_clusters, plot_by_cluster = TRUE))
dev.off()
}
}
### analysis
# common param
f <- "/storage/Documents/service/externe/ilan/20230606_Mouse_DIA_MS/reactome/gene_list.tsv"
# specie can be human or mouse
sp <- "mouse"
sp_lbl <- sp
o <- "/storage/Documents/service/externe/ilan/20230606_Mouse_DIA_MS/reactome/NLRC5d"
fc_col <- "NLRC5d_fc"
pval_col <- "ttest_NLRC5dvsWT"
gs_source <- 'KEGG'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
f <- "/storage/Documents/service/externe/ilan/20230606_Mouse_DIA_MS/reactome/gene_list.tsv"
# specie can be human or mouse
sp <- "mouse"
sp_lbl <- sp
o <- "/storage/Documents/service/externe/ilan/20230606_Mouse_DIA_MS/reactome/NLRC5d"
fc_col <- "NLRC5d_fc"
pval_col <- "ttest_NLRC5dvsWT"
gs_source <- 'KEGG'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
gs_source <- 'KEGG'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gs_source <- 'MSigDB'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
gs_source <- 'MSigDB'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
debugSource("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
debugSource("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
debugSource("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
debugSource("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
Q
debugSource("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
gs_source <- 'KEGG'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
gs_source <- 'KEGG'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
source("/storage/Documents/service/externe/ilan/programs/subilan_repo/R/gen_reactome.R")
library(pathfindR)
library(dplyr)
gen_reactome <- function(f, o, fc_col, pval_col, gs_source, sp_lbl) {
g_list= read.csv(
f,
header = TRUE,
sep="\t",
na.strings = "",
stringsAsFactors=FALSE
)
g_list <- g_list %>% select(gene, fc_col, pval_col) %>% filter_at(vars(pval_col), all_vars(!is.na(.)))
print(paste("Gene source is ", gs_source, sep= ""))
if (gs_source == "KEGG") {
if(sp_lbl == "human"){
sp <- 'hsa'
} else if (sp_lbl == "mouse") {
sp <- 'mmu'
} else{
stop(paste("Unrecongnised specie provided. Possible values are: human or mouse. Value passed: ",sp_lbl,sep=''))
}
message(paste("Gene set list set for KEGG with organism code ", sp, sep= ""))
gsets_list <- get_gene_sets_list(
source = gs_source,
org_code = sp
)
# output_df <- run_pathfindR(
#   g_list,
#   output_dir = o,
#   custom_genes = gsets_list$gene_sets,
#   custom_descriptions = gsets_list$descriptions,
#   min_gset_size = 10,
#   max_gset_size = 300,
#   n_processes = 4,
#   #pin_name_path = "STRING"
#   pin_name_path = "KEGG"
# )
} else if (gs_source == "Reactome") {
message(paste("Gene set list set for Reactome", sp, sep= ""))
gsets_list <- get_gene_sets_list(
source = gs_source
)
# output_df <- run_pathfindR(
#   g_list,
#   output_dir = o,
#   custom_genes = gsets_list$gene_sets,
#   custom_descriptions = gsets_list$descriptions,
#   min_gset_size = 10,
#   max_gset_size = 300,
#   n_processes = 4,
#   #pin_name_path = "STRING"
#   pin_name_path = "Biogrid"
# )
} else if (gs_source == "MSigDB") {
if(sp_lbl != "human" && sp_lbl != "mouse"){
stop(paste("Unrecongnised specie provided. Possible values are: human or mouse. Value passed: ",sp_lbl,sep=''))
}
message(paste("Gene set list set for MSigDB using collection C2 for specie ", sp, sep= ""))
gsets_list <- get_gene_sets_list(
source = gs_source,
species = sp_lbl,
collection = "C2"
)
# output_df <- run_pathfindR(
#   g_list,
#   output_dir = o,
#   custom_genes = gsets_list$gene_sets,
#   custom_descriptions = gsets_list$descriptions,
#   min_gset_size = 10,
#   max_gset_size = 300,
#   n_processes = 4,
#   #pin_name_path = "STRING"
#   pin_name_path = "Biogrid"
# )
}
dir.create(o, showWarnings = TRUE, recursive = TRUE)
#for (pin in c('Biogrid', 'STRING', 'GeneMania', 'IntAct', 'KEGG', 'mmu_STRING')) {
for (pin in c('Biogrid', 'STRING', 'IntAct', 'KEGG', 'mmu_STRING')) {
print(paste("pin=",pin, sep= " "))
d <- paste(o,pin,sep='/')
# dir.create(d, showWarnings = TRUE, recursive = TRUE)
output_df <- run_pathfindR(
g_list,
output_dir = d,
custom_genes = gsets_list$gene_sets,
custom_descriptions = gsets_list$descriptions,
min_gset_size = 10,
max_gset_size = 300,
n_processes = 4,
#pin_name_path = "STRING"
pin_name_path = pin
)
output_df_clustered <- cluster_enriched_terms(output_df, plot_dend = FALSE, plot_clusters_graph = FALSE)
out=paste(d,"enrichment_chart.tsv",sep='/')
write.table(output_df_clustered, file = out, sep = "\t")
# plotting only selected clusters for better visualization
selected_clusters <- subset(output_df_clustered[output_df_clustered$Status == "Representative", ], Cluster %in% 1:10)
# output png enrichment chart
out=paste(d,"enrichment_chart.png",sep='/')
png(
filename = out,
res = 250,
width = 8,
height = 4,
units = "in"
)
plot(enrichment_chart(selected_clusters, plot_by_cluster = TRUE))
dev.off()
# output png enrichment chart
out=paste(d,"enrichment_chart.svg",sep='/')
svg(
filename = out,
width = 8,
height = 4
)
plot(enrichment_chart(selected_clusters, plot_by_cluster = TRUE))
dev.off()
}
}
### analysis
f <- "/storage/Documents/service/externe/ilan/20230606_Mouse_DIA_MS/reactome/gene_list_nlrc5vsrag1.tsv"
# specie can be human or mouse
sp <- "mouse"
sp_lbl <- sp
o <- "/storage/Documents/service/externe/ilan/20230606_Mouse_DIA_MS/reactome/NLRC5vsRAG1d"
fc_col <- "fc_NLRC5dvsRAG1d"
pval_col <- "ttest_NLRC5dvsRAG1d"
gs_source <- 'KEGG'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
f <- "/storage/Documents/service/externe/ilan/20230606_Mouse_DIA_MS/reactome/gene_list_nlrc5vsrag1.tsv"
# specie can be human or mouse
sp <- "mouse"
sp_lbl <- sp
o <- "/storage/Documents/service/externe/ilan/20230606_Mouse_DIA_MS/reactome/NLRC5vsRAG1d"
fc_col <- "fc_NLRC5dvsRAG1d"
pval_col <- "ttest_NLRC5dvsRAG1d"
gs_source <- 'KEGG'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
gs_source <- 'Reactome'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
gs_source <- 'MSigDB'
oo <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, oo, fc_col, pval_col, gs_source, sp)
library(pathfindR)
library(dplyr)
gen_reactome <- function(f, o, fc_col, pval_col, gs_source, sp_lbl) {
g_list= read.csv(
f,
header = TRUE,
sep="\t",
na.strings = "",
stringsAsFactors=FALSE
)
g_list <- g_list %>% select(gene, fc_col, pval_col) %>% filter_at(vars(pval_col), all_vars(!is.na(.)))
print(paste("Gene source is ", gs_source, sep= ""))
if (gs_source == "KEGG") {
if(sp_lbl == "human"){
sp <- 'hsa'
} else if (sp_lbl == "mouse") {
sp <- 'mmu'
} else{
stop(paste("Unrecongnised specie provided. Possible values are: human or mouse. Value passed: ",sp_lbl,sep=''))
}
message(paste("Gene set list set for KEGG with organism code ", sp, sep= ""))
gsets_list <- get_gene_sets_list(
source = gs_source,
org_code = sp
)
# output_df <- run_pathfindR(
#   g_list,
#   output_dir = o,
#   custom_genes = gsets_list$gene_sets,
#   custom_descriptions = gsets_list$descriptions,
#   min_gset_size = 10,
#   max_gset_size = 300,
#   n_processes = 4,
#   #pin_name_path = "STRING"
#   pin_name_path = "KEGG"
# )
} else if (gs_source == "Reactome") {
message(paste("Gene set list set for Reactome", sp, sep= ""))
gsets_list <- get_gene_sets_list(
source = gs_source
)
# output_df <- run_pathfindR(
#   g_list,
#   output_dir = o,
#   custom_genes = gsets_list$gene_sets,
#   custom_descriptions = gsets_list$descriptions,
#   min_gset_size = 10,
#   max_gset_size = 300,
#   n_processes = 4,
#   #pin_name_path = "STRING"
#   pin_name_path = "Biogrid"
# )
} else if (gs_source == "MSigDB") {
if(sp_lbl != "human" && sp_lbl != "mouse"){
stop(paste("Unrecongnised specie provided. Possible values are: human or mouse. Value passed: ",sp_lbl,sep=''))
}
message(paste("Gene set list set for MSigDB using collection C2 for specie ", sp, sep= ""))
gsets_list <- get_gene_sets_list(
source = gs_source,
species = sp_lbl,
collection = "C2"
)
# output_df <- run_pathfindR(
#   g_list,
#   output_dir = o,
#   custom_genes = gsets_list$gene_sets,
#   custom_descriptions = gsets_list$descriptions,
#   min_gset_size = 10,
#   max_gset_size = 300,
#   n_processes = 4,
#   #pin_name_path = "STRING"
#   pin_name_path = "Biogrid"
# )
}
dir.create(o, showWarnings = TRUE, recursive = TRUE)
#for (pin in c('Biogrid', 'STRING', 'GeneMania', 'IntAct', 'KEGG', 'mmu_STRING')) {
for (pin in c('Biogrid', 'STRING', 'IntAct', 'KEGG', 'mmu_STRING')) {
print(paste("pin=",pin, sep= " "))
d <- paste(o,pin,sep='/')
# dir.create(d, showWarnings = TRUE, recursive = TRUE)
output_df <- run_pathfindR(
g_list,
output_dir = d,
custom_genes = gsets_list$gene_sets,
custom_descriptions = gsets_list$descriptions,
min_gset_size = 10,
max_gset_size = 300,
n_processes = 4,
#pin_name_path = "STRING"
pin_name_path = pin
)
output_df_clustered <- cluster_enriched_terms(output_df, plot_dend = FALSE, plot_clusters_graph = FALSE)
out=paste(d,"enrichment_chart.tsv",sep='/')
write.table(output_df_clustered, file = out, sep = "\t")
# plotting only selected clusters for better visualization
selected_clusters <- subset(output_df_clustered[output_df_clustered$Status == "Representative", ], Cluster %in% 1:10)
# output png enrichment chart
out=paste(d,"enrichment_chart.png",sep='/')
png(
filename = out,
res = 250,
width = 8,
height = 4,
units = "in"
)
plot(enrichment_chart(selected_clusters, plot_by_cluster = TRUE))
dev.off()
# output png enrichment chart
out=paste(d,"enrichment_chart.svg",sep='/')
svg(
filename = out,
width = 8,
height = 4
)
plot(enrichment_chart(selected_clusters, plot_by_cluster = TRUE))
dev.off()
}
}
f <- "/storage/Documents/service/externe/ilan/20240702_mouse_ms_organoid/reactome/gene_list.tsv"
# specie can be human or mouse
sp <- "mouse"
sp_lbl <- sp
o <- "/storage/Documents/service/externe/ilan/20240702_mouse_ms_organoid/reactome"
fc_col <- "fc_KOvsWT"
pval_col <- "ttest_KOvsWT"
gs_source <- 'KEGG'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
gs_source <- 'Reactome'
out <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, out, fc_col, pval_col, gs_source, sp)
gs_source <- 'MSigDB'
oo <- paste(o,gs_source,sep='/')
print(paste("##### Running",gs_source, sep = " "))
gen_reactome(f, oo, fc_col, pval_col, gs_source, sp)
install.packages("renv")
renv::install("bioc::ComplexHeatmap")
renv::install("bioc::limma")
renv::install("bioc::MSnbase")
renv::install("bioc::SummarizedExperiment")
renv::install("bioc::cmapR", prompt=FALSE)
renv::install("bioc::ConsensusClusterPlus", prompt=FALSE)
renv::install("Nesvilab/FragPipeAnalystR", prompt=FALSE)
# optional
renv::install("nicolerg/ssGSEA2", prompt=FALSE)
library(FragPipeAnalystR)
? make_se_from_files
data("ccrcc", package = "FragPipeAnalystR")
force(ccrcc)
View(ccrcc)
View(ccrcc)
View(ccrcc)
View(ccrcc)
ccrcc <- make_se_from_files(
"/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/results/report.pg_matrix.tsv",
"/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/experiment_annotation.tsv",
type = "DIA"
)
make_se_from_files
ccrcc <- make_se_from_files(
"/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/results/report.unique_genes_matrix.tsv",
"/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/experiment_annotation.tsv",
type = "DIA",
level = "gene"
)
ccrcc <- make_se_from_files(
"/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/results/report.pg_matrix.tsv",
"/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/experiment_annotation.tsv",
type = "DIA",
level = "gene"
)
make_se_from_files
readQuantTable
temp_data <- read.table(quant_table_path,
header = TRUE,
fill = TRUE, # to fill any missing data
sep = "\t",
quote = "",
comment.char = "",
blank.lines.skip = F,
check.names = F
)
quant_table_path <- "/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/results/report.pg_matrix.tsv",
quant_table_path <- "/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/results/report.pg_matrix.tsv"
exp_anno_path <- "/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/experiment_annotation.tsv"
level <- "protein"
type <- "DIA"
log2transform <- T
temp_data <- read.table(quant_table_path,
header = TRUE,
fill = TRUE, # to fill any missing data
sep = "\t",
quote = "",
comment.char = "",
blank.lines.skip = F,
check.names = F
)
View(temp_data)
make.unique.2 <- function(x, sep = ".") {
ave(x, x, FUN = function(a) {
if (length(a) > 1) {
paste(a, 1:length(a), sep = sep)
} else {
a
}
})
}
colnames(temp_data) <- make.unique.2(colnames(temp_data), "_")
View(temp_data)
y <- make.unique.2(colnames(temp_data), "_")
y
colnames(temp_data)
colnames(temp_data) <- make.unique.2(colnames(temp_data), "_")
quant_table <- temp_data
View(quant_table)
exp_anno_path <- "/storage/Documents/service/externe/sheela/20240729_mouse_ms_lysM/experiment_annotation.tsv"
lfq_type = "Intensity"
gencode = F
exp_design <- readExpDesign(exp_anno_path, type = type, lfq_type = lfq_type)
# exp_design <- readExpDesign(exp_anno_path, type = type, lfq_type = lfq_type)
temp_df <- read.table(exp_anno_path, header = T, sep = "\t", stringsAsFactors = F)
lowercase=F
temp_df$condition <- make.names(temp_df$condition)
View(temp_df)
temp_df$condition <- make.names(temp_df$condition)
temp_df$label <- temp_df$sample
anyDuplicated(temp_df$label)
# exp_design <- readExpDesign(exp_anno_path, type = type, lfq_type = lfq_type)
temp_df <- read.table(exp_anno_path,
header = T,
sep = "\t",
stringsAsFactors = FALSE
)
View(temp_df)
colnames(temp_df) <- tolower(colnames(temp_df))
# to support - (dash) or name starts with number in condition column
temp_df$condition <- make.names(temp_df$condition)
if (!all(is.na(temp_df$replicate))) {
temp_df$label <- temp_df$file
}
is.na(temp_df$replicate)
!all(is.na(temp_df$replicate))
exp_design <- temp_df
data_unique <- make_unique(quant_table, "Genes", "Protein.Group")
View(data_unique)
cols <- colnames(data_unique)
selected_cols <- which(!(cols %in% c("Protein.Group", "Protein.Ids", "Protein.Names", "Genes", "First.Protein.Description", "ID", "name")))
# TODO: use DIA function
# test_match_DIA_column_design(data_unique, selected_cols, exp_design)
data_se <- make_se_customized(data_unique, selected_cols, exp_design,
log2transform = log2transform, exp="DIA", level="protein")
proteins <- quant_table
names <- "Genes"
ids <- "Protein.Group"
delim = ";"
col_names <- colnames(proteins)
!names %in% col_names
!ids %in% col_names
tibble::is_tibble(proteins)
# Select the name and id columns, and check for NAs
double_NAs <- apply(proteins[, c(names, ids)], 1, function(x) all(is.na(x)))
double_NAs
any(double_NAs)
View(proteins)
gsub(paste0(delim, ".*"), "", get(names))
proteins_unique <- proteins %>%
dplyr::mutate(
name = gsub(paste0(delim, ".*"), "", get(names)),
ID = gsub(paste0(delim, ".*"), "", get(ids)),
name = make.unique(ifelse(name == "" | is.na(name), ID, name))
)
# Take the first identifier per row and make unique names.
# If there is no name, the ID will be taken.
library("dplyr")
proteins_unique <- proteins %>%
dplyr::mutate(
name = gsub(paste0(delim, ".*"), "", get(names)),
ID = gsub(paste0(delim, ".*"), "", get(ids)),
name = make.unique(ifelse(name == "" | is.na(name), ID, name))
)
View(proteins_unique)
data_unique <- proteins_unique
cols <- colnames(data_unique)
selected_cols <- which(!(cols %in% c("Protein.Group", "Protein.Ids", "Protein.Names", "Genes", "First.Protein.Description", "ID", "name")))
# TODO: use DIA function
# test_match_DIA_column_design(data_unique, selected_cols, exp_design)
data_se <- make_se_customized(data_unique, selected_cols, exp_design,
log2transform = log2transform, exp="DIA", level="protein")
